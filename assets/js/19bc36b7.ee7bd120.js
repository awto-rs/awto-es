"use strict";(self.webpackChunkthalo_docs=self.webpackChunkthalo_docs||[]).push([[848],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>c});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var g=a.createContext({}),m=function(e){var n=a.useContext(g),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},s=function(e){var n=m(e.components);return a.createElement(g.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,g=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=m(t),u=r,c=d["".concat(g,".").concat(u)]||d[u]||p[u]||i;return t?a.createElement(c,o(o({ref:n},s),{},{components:t})):a.createElement(c,o({ref:n},s))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var g in n)hasOwnProperty.call(n,g)&&(l[g]=n[g]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3588:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>g,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:4},o="Writing and Deploying Aggregates",l={unversionedId:"writing-and-deploying-aggregates",id:"writing-and-deploying-aggregates",title:"Writing and Deploying Aggregates",description:"In Thalo, aggregates are the central part of the event-sourcing model. This section guides you through defining, implementing, compiling, and running aggregates.",source:"@site/docs/writing-and-deploying-aggregates.md",sourceDirName:".",slug:"/writing-and-deploying-aggregates",permalink:"/docs/writing-and-deploying-aggregates",draft:!1,editUrl:"https://github.com/thalo-rs/thalo-docs/tree/main/packages/create-docusaurus/templates/shared/docs/writing-and-deploying-aggregates.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Concepts and Architecture",permalink:"/docs/concepts-and-architecture"},next:{title:"Event Store Management",permalink:"/docs/event-store-management"}},g={},m=[{value:"Defining an Aggregate",id:"defining-an-aggregate",level:2},{value:"Implementing Commands and Events",id:"implementing-commands-and-events",level:2},{value:"Commands",id:"commands",level:3},{value:"Events",id:"events",level:3},{value:"Compiling Aggregates to Wasm",id:"compiling-aggregates-to-wasm",level:2},{value:"Loading and Running Aggregates in Thalo",id:"loading-and-running-aggregates-in-thalo",level:2}],s={toc:m};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"writing-and-deploying-aggregates"},"Writing and Deploying Aggregates"),(0,r.kt)("p",null,"In Thalo, aggregates are the central part of the event-sourcing model. This section guides you through defining, implementing, compiling, and running aggregates."),(0,r.kt)("h2",{id:"defining-an-aggregate"},"Defining an Aggregate"),(0,r.kt)("p",null,"An aggregate in Thalo is a Rust struct that represents a collection of objects with a shared lifecycle. To define an aggregate:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use thalo::{Aggregate, export_aggregate};\n\nexport_aggregate!(MyAggregate);\npub struct MyAggregate {\n    // fields go here\n}\nimpl Aggregate for MyAggregate {\n    // implementation details\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"export_aggregate!")," macro makes the aggregate available to the Thalo runtime."),(0,r.kt)("h2",{id:"implementing-commands-and-events"},"Implementing Commands and Events"),(0,r.kt)("h3",{id:"commands"},"Commands"),(0,r.kt)("p",null,"Commands are actions that modify the state of an aggregate.\nThey are defined using an enum and the ",(0,r.kt)("inlineCode",{parentName:"p"},"Command")," derive macro, and must also implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Deserialize"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use thalo::Command;\nuse serde::Deserialize;\n\n#[derive(Command, Deserialize)]\npub enum MyCommand {\n    // command variants\n}\n")),(0,r.kt)("p",null,"Commands can be defined as ",(0,r.kt)("em",{parentName:"p"},"inline")," or ",(0,r.kt)("em",{parentName:"p"},"external"),":"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Inline Commands")),(0,r.kt)("p",null,"Inline commands are defined in a single enum with one implementation of ",(0,r.kt)("inlineCode",{parentName:"p"},"Handle"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// Inline commands\n#[derive(Command, Deserialize)]\npub enum MyCommand {\n    Command1 { foo: String },\n    Command2 { bar: String },\n}\n\nimpl Handle<MyCommand> for MyAggregate { ... }\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"External Commands")),(0,r.kt)("p",null,"External commands use one struct per command, where each struct implements ",(0,r.kt)("inlineCode",{parentName:"p"},"Handle"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"// External commands\n#[derive(Command, Deserialize)]\npub enum MyCommand {\n    Command1(Command1),\n    Command2(Command2),\n}\n\n#[derive(Deserialize)]\npub struct Command1 { foo: String }\nimpl Handle<Command1> for MyAggregate { ... }\n\n#[derive(Deserialize)]\npub struct Command2 { bar: String }\nimpl Handle<Command2> for MyAggregate { ... }\n")),(0,r.kt)("h3",{id:"events"},"Events"),(0,r.kt)("p",null,"Events represent the result of executing commands.\nThey are immutable and defined using an enum and the ",(0,r.kt)("inlineCode",{parentName:"p"},"Event")," derive macro, along with ",(0,r.kt)("inlineCode",{parentName:"p"},"Serialize")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Deserialize"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"use thalo::Event;\n\n#[derive(Event)]\npub enum MyEvent {\n    // Event variants\n}\n")),(0,r.kt)("p",null,"Each variant must implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Apply"),", which is how the aggregate state is updated."),(0,r.kt)("h2",{id:"compiling-aggregates-to-wasm"},"Compiling Aggregates to Wasm"),(0,r.kt)("p",null,"To compile your aggregate to WebAssembly (wasm), use the Thalo CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"thalo build my_aggregate -o ./modules\n")),(0,r.kt)("p",null,"This command compiles the aggregate and prepares it for execution in the Thalo runtime environment."),(0,r.kt)("h2",{id:"loading-and-running-aggregates-in-thalo"},"Loading and Running Aggregates in Thalo"),(0,r.kt)("p",null,"Once compiled, Thalo automatically loads all wasm modules from the specified directory. Start the Thalo runtime with:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'thalo-runtime\nINFO: loaded module from file file="modules/my_aggregate.wasm"\n')),(0,r.kt)("p",null,"Your aggregate is now running and ready to handle commands and events."))}d.isMDXComponent=!0}}]);