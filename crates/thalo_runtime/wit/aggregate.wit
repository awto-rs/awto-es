package thalo:aggregate;

interface tracing {
    send-event: func(event: list<u8>);
}

world aggregate {
    import tracing;

    export aggregate: interface {
        record event {
            event: string,
            payload: string,
        }

        record command {
            command: string,
            payload: string,
        }

        variant error {
            command(tuple<string, string>),
            deserialize-command(tuple<string, string>),
            deserialize-context(string),
            deserialize-event(tuple<string, string>),
            serialize-error(tuple<string, string>),
            serialize-event(string),
        }

        resource entity {
            constructor(id: string);
            apply: func(events: list<event>) -> result<_, error>;
            handle: func(command: command) -> result<list<event>, error>;
        }
    }
}
