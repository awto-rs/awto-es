package thalo:aggregate;

world aggregate {
    export aggregate: interface {
        record context {
            id: u64,
            stream-name: string,
            position: u64,
            metadata: string,
            time: u64,
        }

        record event {
            ctx: context,
            event: string,
            payload: string,
        }

        record command {
            ctx: context,
            command: string,
            payload: string,
        }

        variant error {
            command(string),
            ignore(option<string>),
            instance-not-found,
            deserialize-command(string),
            deserialize-context(string),
            deserialize-event(string),
            serialize-event(string),
            parse-id(string),
        }

        init: func(id: string) -> result<_, error>;
        apply: func(id: string, events: list<event>) -> result<_, error>;
        handle: func(id: string, command: command) -> result<list<event>, error>;
    }
}
